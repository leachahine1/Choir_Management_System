{
    "sourceFile": "comparison/FYP-master/ngrams_preprocessing.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1715169700143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715169736805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,11 +116,11 @@\n optional_sub_value = data[\"song_title\"][\"optional_sub\"]\r\n optional_sub_value_with_test = f\"{optional_sub_value} test\"\r\n \r\n # Use the extracted value to construct the file paths\r\n-midi_file_path1 = fr'C:\\wamp\\www\\Choir_Management_System-final\\Test Files\\{optional_sub_value}.mid'\r\n-midi_file_path1_mxl = fr'C:\\wamp\\www\\Choir_Management_System-final\\Test Files\\{optional_sub_value}.mxl'\r\n-midi_file_path2 = fr'C:\\wamp\\www\\Choir_Management_System-final\\Test Files\\{optional_sub_value_with_test}.mid'\r\n+midi_file_path1 = fr'C:\\xampp\\htdocs\\Choir_Management_System-final\\Test Files\\{optional_sub_value}.mid'\r\n+midi_file_path1_mxl = fr'C:\\xampp\\htdocs\\Choir_Management_System-final\\Test Files\\{optional_sub_value}.mxl'\r\n+midi_file_path2 = fr'C:\\xampp\\htdocs\\Choir_Management_System-final\\Test Files\\{optional_sub_value_with_test}.mid'\r\n \r\n # Now you can use midi_file_path1 and midi_file_path1_mxl\r\n print(\"MIDI Ref File Path:\", midi_file_path1)\r\n print(\"MXL File Path:\", midi_file_path1_mxl)\r\n"
                }
            ],
            "date": 1715169700143,
            "name": "Commit-0",
            "content": "import mido\r\nfrom mido import MidiFile\r\nimport json\r\n\r\ndef parse_midi(file_path):\r\n    midi_file = MidiFile(file_path)\r\n    notes_stream = []\r\n\r\n    for i, track in enumerate(midi_file.tracks):\r\n        for msg in track:\r\n            if msg.type == 'note_on' and msg.velocity!=0:\r\n                note = {\r\n                    'channel': i,\r\n                    'start': msg.time,\r\n                    'duration': None,\r\n                    'pitch': msg.note,\r\n                    'velocity': msg.velocity\r\n                }\r\n                notes_stream.append(note)\r\n            # elif msg.type == 'note_off':\r\n            #     for note in reversed(notes_stream):\r\n            #         if note['pitch'] == msg.note and note['channel'] == i and note['duration'] is None:\r\n            #             note['duration'] = msg.time - note['start']\r\n            #             break\r\n    #print(notes_stream)\r\n    return notes_stream\r\n\r\ndef separate_tracks(notes_stream):\r\n    tracks = []\r\n\r\n    for note in notes_stream:\r\n        tracks.append([note])\r\n    #print(tracks)\r\n    return tracks\r\n\r\n\r\n\r\n# def merge_notes(tracks):\r\n#     merged_track = []\r\n#     for i, notes in enumerate(tracks):\r\n#         if (i == 0 or (tracks[i][0]['start'] - tracks[i-1][0]['start']) > 50):\r\n#             merged_track.append(notes)\r\n#         else:\r\n#             test = tracks[i][0]['pitch']\r\n#             test2 = merged_track[-1][0]['pitch']\r\n#             if tracks[i][0]['pitch'] > merged_track[-1]['pitch']:\r\n#                 merged_track[-1] = notes\r\n#     return merged_track\r\n\r\n\r\n\r\ndef get_pitch_sequence(tracks):\r\n    pitch_sequence = []\r\n    for track in tracks:\r\n        for note in track:\r\n            pitch_sequence.append(note[\"pitch\"])\r\n    #print(pitch_sequence)\r\n    return pitch_sequence\r\n\r\n\r\n\r\ndef compute_difference(pitch_sequence, margin_of_error=0):\r\n    difference_sequence = [abs(pitch_sequence[i + 1] - pitch_sequence[i]) for i in range(len(pitch_sequence) - 1)]\r\n    #print(difference_sequence)\r\n    return difference_sequence\r\n\r\n\r\ndef get_string_sequence(pitch_sequence):\r\n    string_sequence = []\r\n    for pitch in pitch_sequence:\r\n        string_sequence.append(chr(pitch)) # Convert difference to ASCII character\r\n    return string_sequence\r\n\r\n\r\n\r\ndef main(file_path):\r\n    # Step 1: Parse MIDI file\r\n    notes_stream = parse_midi(file_path)\r\n    #print(len(notes_stream))\r\n    #print(notes_stream)\r\n\r\n\r\n    # Step 2: Separate tracks by Channel\r\n    tracks = separate_tracks(notes_stream)\r\n\r\n    # Step 3: Merge notes in each track\r\n    #merged_tracks = merge_notes(tracks)\r\n    #print(merged_tracks)\r\n    #print(\"__________\")\r\n\r\n    # Steps 4 and 5: Get pitch sequence and compute difference\r\n\r\n    pitch_sequence = get_pitch_sequence(tracks)\r\n    #print(pitch_sequence)\r\n\r\n    difference_sequence = compute_difference(pitch_sequence, margin_of_error=3)\r\n\r\n    # Step 6: Get string sequence\r\n    string_sequence = get_string_sequence(pitch_sequence)\r\n\r\n        # print(f\"Track {i+1} String Sequence: {string_sequence}\")\r\n    #print(string_sequence)\r\n    #print(len(string_sequence))\r\n    return string_sequence\r\n\r\n####################################################\r\n\r\n# Define the path to the JSON file\r\njson_file_path = r\"C:\\xampp\\htdocs\\Choir_Management_System-final\\song_title.json\"\r\n\r\n# Read the contents of the JSON file\r\nwith open(json_file_path, \"r\") as file:\r\n    data = json.load(file)\r\n\r\n# Extract the value of \"song_title\":{\"optional_sub\"}\r\noptional_sub_value = data[\"song_title\"][\"optional_sub\"]\r\noptional_sub_value_with_test = f\"{optional_sub_value} test\"\r\n\r\n# Use the extracted value to construct the file paths\r\nmidi_file_path1 = fr'C:\\wamp\\www\\Choir_Management_System-final\\Test Files\\{optional_sub_value}.mid'\r\nmidi_file_path1_mxl = fr'C:\\wamp\\www\\Choir_Management_System-final\\Test Files\\{optional_sub_value}.mxl'\r\nmidi_file_path2 = fr'C:\\wamp\\www\\Choir_Management_System-final\\Test Files\\{optional_sub_value_with_test}.mid'\r\n\r\n# Now you can use midi_file_path1 and midi_file_path1_mxl\r\nprint(\"MIDI Ref File Path:\", midi_file_path1)\r\nprint(\"MXL File Path:\", midi_file_path1_mxl)\r\nprint(\"MIDI Test File Path:\", midi_file_path2)\r\n\r\nstring_sequences1 = main(midi_file_path1)\r\nstring_sequences2 = main(midi_file_path2)\r\n# string_sequences3 = main(midi_file_path3)"
        }
    ]
}